/**
 * Generates a buffer containing a series of randomly generated bytes.
 *
 * @param length The number of bytes to generate.
 * @returns A `Uint8Array` representing `length` randomly generated bytes.
 */
export const randomBytes = (length: number): Uint8Array => {
  const bytes = new Uint8Array(length);
  crypto.getRandomValues(bytes);
  return bytes;
};

export const isUint8ArrayEmpty = (array: Uint8Array): boolean => {
  return array.every((byte) => byte === 0);
}

export const uint8ToHex = (uint8array: Uint8Array): string => {
    return [...uint8array]
      .map(x => x.toString(16).padStart(2, '0'))
      .join('');
}

export const oneToTen = (): number[] => {
  return [...Array(10).keys()];
}

export const getLetterForIndex = (index: number): string => {
  return String.fromCharCode('A'.charCodeAt(0) + index);
}
